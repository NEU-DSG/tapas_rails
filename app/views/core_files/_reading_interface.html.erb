<div class="reading">
  <% @view_packages.each do |view| %>
    <div class="reader_<%= view[1] %>">
      <% if view[1] == 'teibp' %>
        <div class="row">
          <div class="checkbox">
            <label for="toggle_word_wrap">
              <%= "Toggle Soft Wrap" %>
            </label>
            <%= check_box_tag :toggle_word_wrap,  id:'toggle_word_wrap', name:'toggle_word_wrap' %>
          </div>
          <div class="checkbox">
            <label for="toggle_invisibles">
              <%= "Toggle Invisibles" %>
            </label>
            <%= check_box_tag :toggle_invisibles, id:'toggle_invisibles', name: 'toggle_invisibles' %>
          </div>
        </div>
        <pre id="ace">
        </pre>
        <div id="reader-node"></div>
      <% else %>
        <% reader_view = [] %>
        <% # - if reader_view && reader_view.content.content %>
        <% #   = reader_view.content.content.html_safe.force_encoding('utf-8') %>
        <% # - else %>
        <% #   = "This view package could not be rendered" %>
      <% end %>
    </div>
  <% end %>
</div>
<script src="/assets/saxon-js/SaxonJS2.js"></script>
<script>
  function updateReadingInterface(contents) {
    const readerNode = document.getElementById('reader-node')
    readerNode.replaceChild(contents, readerNode.firstChild);
  }

  window.addEventListener('load', function readingEnvLoaded() {
    let rawXml = ''
    let styledTei = ''
    const canonicalObjectUrl = '<%= rails_blob_path(@core_file.canonical_object) %>'

    const selectionEl = document.getElementById('reading_selector') || {}

    async function updateXml() {
      const selectedOption = selectionEl.selectedOptions && selectionEl.selectedOptions[0] || {}
      const selectedValue = selectedOption.value || 'tei2html'

      if (selectedValue === 'teibp') {
        if (rawXml === '') {
          const resp = await fetch(canonicalObjectUrl)
          const xml = await resp.text()

          rawXml = xml
        }

        const pre = document.createElement('pre')
        pre.innerText = rawXml
        return updateReadingInterface(pre)
      }

      if (styledTei === '') {
        const doc = await SaxonJS.transform({
          sourceLocation: canonicalObjectUrl,
          stylesheetLocation: `/assets/${selectedValue}.sef.json`
        }, 'async')

        styledTei = doc.principalResult
      }

      updateReadingInterface(styledTei)
    }

    selectionEl.addEventListener('change', updateXml);
    updateXml();
  })
</script>
